from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup  # машина состояний
from aiogram.dispatcher import FSMContext  # машина состояний
from aiogram.types import ReplyKeyboardMarkup,KeyboardButton  # импорт для клавиатуры
import asyncio


api = 'api'
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
kb = ReplyKeyboardMarkup(resize_keyboard=True)  # инициализируем клавиатуру как экземпляр класса
button_1 = KeyboardButton(text='Рассчитать')  # создаем кнопку с параметром text
button_2 = KeyboardButton(text='Информация')  # создаем кнопку с параметром text
# kb.add(button_1) добавляем кнопку в клавиатуру
# kb.add(button_2) добавляем кнопку в клавиатуру
kb.row(button_1, button_2)  # добавляем кнопки в один ряд


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.message_handler(text=['Рассчитать'])  # параметр, когда функция реагирует на определенные сообщения
async def set_age(message):
    await message.answer('Введите,пожалуйста, свой возраст.')  # вывод сообщения пользователю
    await UserState.age.set()  # ожидаем ввода возраста в атрибут UserState.age и устанавливаем его


@dp.message_handler(state=UserState.age)  # handler, который откликается на переданное состояние UserState.age
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('Отлично! Теперь укажите свой рост.')
    await UserState.growth.set()  # ожидаем ввода роста в атрибут UserState.growth и устанавливаем его


@dp.message_handler(state=UserState.growth)  # handler, который откликается на переданное состояние UserState.growth
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('Супер. Последний этап - Ваш вес.')
    await UserState.weight.set()  # ожидаем ввода веса в атрибут UserState.weight и устанавливаем его


@dp.message_handler(state=UserState.weight)  # handler, который откликается на переданное состояние UserState.weight
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()  # запоминаем в переменную data все ранее введённые состояния
    # составляем формулу использую ключи к словарю с состояниями
    formula = 10 * int(data['weight']) + 6.25 * int(data['growth']) - 5 * int(data['age']) + 5
    await message.answer(f'Ваша норма калорий:{formula}')
    await state.finish()  # закрываем машину состояний


@dp.message_handler(commands=['start'])  # параметр, когда функция отрабатывает по определенной команде
async def start_2(message):
    await message.answer('Привет. Я бот,который помогает следить за здоровьем. Нажмите команду "Рассчитать",'
                         'чтобы начать.', reply_markup=kb)  # вызываем клавиатуру для вывода на экран user


@dp.message_handler()  # обработчик всех сообщений, ставим в конец, чтобы не перехватывал остальные команды.
async def all_massages(message):
    await message.answer('Введите команду /start.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
